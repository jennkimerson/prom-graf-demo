apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      alpha.image.policy.openshift.io/resolve-names: '*'
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"grafana:latest","namespace":"ceph-build-metrics"},"fieldPath":"spec.template.spec.containers[?(@.name==\"grafana\")].image","pause":"false"}]'
    labels:
      app: grafana
      app.kubernetes.io/component: grafana
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/part-of: ceph-build-metrics
      app.openshift.io/runtime-namespace: ceph-build-metrics
    name: grafana
    namespace: ceph-build-metrics
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: grafana
          deploymentconfig: grafana
      spec:
        containers:
        - envFrom:
          - configMapRef:
              name: grafana
          image: mirror.gcr.io/grafana/grafana:latest
          imagePullPolicy: Always
          name: grafana
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: grafana
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - test -f /data/grafana.ini || cp -v /etc/grafana/grafana.ini /data/
          image: mirror.gcr.io/grafana/grafana:latest
          imagePullPolicy: Always
          name: volume-init
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: grafana
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: grafana
          persistentVolumeClaim:
            claimName: grafana
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      alpha.image.policy.openshift.io/resolve-names: '*'
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"prometheus:latest","namespace":"ceph-build-metrics"},"fieldPath":"spec.template.spec.containers[?(@.name==\"prometheus\")].image","pause":"false"}]'
    labels:
      app: prometheus
      app.kubernetes.io/component: prometheus
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/part-of: ceph-build-metrics
      app.openshift.io/runtime-namespace: ceph-build-metrics
    name: prometheus
    namespace: ceph-build-metrics
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: prometheus
          deploymentconfig: prometheus
      spec:
        containers:
        - image: mirror.gcr.io/prom/prometheus:latest
          imagePullPolicy: Always
          name: prometheus
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /prometheus
            name: prometheus
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - sh
          - -c
          - test -f /prometheus/prometheus.yml || cp -v /etc/prometheus/prometheus.yml /prometheus/
          image: mirror.gcr.io/prom/prometheus:latest
          imagePullPolicy: Always
          name: volume-init
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /prometheus
            name: prometheus
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: prometheus
          persistentVolumeClaim:
            claimName: prometheus
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
